// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/10/2017 21:44:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    sdr_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module sdr_test_vlg_sample_tst(
	clk,
	rst_n,
	sdram_data,
	sampler_tx
);
input  clk;
input  rst_n;
input [15:0] sdram_data;
output sampler_tx;

reg sample;
time current_time;
always @(clk or rst_n or sdram_data)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module sdr_test_vlg_check_tst (
	clk_100m,
	rdf_use,
	rs232_tx,
	sdram_addr,
	sdram_ba,
	sdram_cas_n,
	sdram_cke,
	sdram_clk,
	sdram_cs_n,
	sdram_data,
	sdram_ldqm,
	sdram_ras_n,
	sdram_udqm,
	sdram_we_n,
	tx_start,
	wrf_use,
	sampler_rx
);
input  clk_100m;
input [8:0] rdf_use;
input  rs232_tx;
input [12:0] sdram_addr;
input [1:0] sdram_ba;
input  sdram_cas_n;
input  sdram_cke;
input  sdram_clk;
input  sdram_cs_n;
input [15:0] sdram_data;
input  sdram_ldqm;
input  sdram_ras_n;
input  sdram_udqm;
input  sdram_we_n;
input  tx_start;
input [8:0] wrf_use;
input sampler_rx;

reg  clk_100m_expected;
reg [8:0] rdf_use_expected;
reg  rs232_tx_expected;
reg [12:0] sdram_addr_expected;
reg [1:0] sdram_ba_expected;
reg  sdram_cas_n_expected;
reg  sdram_cke_expected;
reg  sdram_clk_expected;
reg  sdram_cs_n_expected;
reg [15:0] sdram_data_expected;
reg  sdram_ldqm_expected;
reg  sdram_ras_n_expected;
reg  sdram_udqm_expected;
reg  sdram_we_n_expected;
reg  tx_start_expected;
reg [8:0] wrf_use_expected;

reg  clk_100m_prev;
reg [8:0] rdf_use_prev;
reg  rs232_tx_prev;
reg [12:0] sdram_addr_prev;
reg [1:0] sdram_ba_prev;
reg  sdram_cas_n_prev;
reg  sdram_cke_prev;
reg  sdram_clk_prev;
reg  sdram_cs_n_prev;
reg [15:0] sdram_data_prev;
reg  sdram_ldqm_prev;
reg  sdram_ras_n_prev;
reg  sdram_udqm_prev;
reg  sdram_we_n_prev;
reg  tx_start_prev;
reg [8:0] wrf_use_prev;

reg  clk_100m_expected_prev;
reg  sdram_clk_expected_prev;
reg [15:0] sdram_data_expected_prev;

reg  last_clk_100m_exp;
reg  last_sdram_clk_exp;
reg [15:0] last_sdram_data_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	clk_100m_prev = clk_100m;
	rdf_use_prev = rdf_use;
	rs232_tx_prev = rs232_tx;
	sdram_addr_prev = sdram_addr;
	sdram_ba_prev = sdram_ba;
	sdram_cas_n_prev = sdram_cas_n;
	sdram_cke_prev = sdram_cke;
	sdram_clk_prev = sdram_clk;
	sdram_cs_n_prev = sdram_cs_n;
	sdram_data_prev = sdram_data;
	sdram_ldqm_prev = sdram_ldqm;
	sdram_ras_n_prev = sdram_ras_n;
	sdram_udqm_prev = sdram_udqm;
	sdram_we_n_prev = sdram_we_n;
	tx_start_prev = tx_start;
	wrf_use_prev = wrf_use;
end

// update expected /o prevs

always @(trigger)
begin
	clk_100m_expected_prev = clk_100m_expected;
	sdram_clk_expected_prev = sdram_clk_expected;
	sdram_data_expected_prev = sdram_data_expected;
end



// expected sdram_clk
initial
begin
	sdram_clk_expected = 1'bX;
end 

// expected clk_100m
initial
begin
	clk_100m_expected = 1'bX;
end 
// generate trigger
always @(clk_100m_expected or clk_100m or rdf_use_expected or rdf_use or rs232_tx_expected or rs232_tx or sdram_addr_expected or sdram_addr or sdram_ba_expected or sdram_ba or sdram_cas_n_expected or sdram_cas_n or sdram_cke_expected or sdram_cke or sdram_clk_expected or sdram_clk or sdram_cs_n_expected or sdram_cs_n or sdram_data_expected or sdram_data or sdram_ldqm_expected or sdram_ldqm or sdram_ras_n_expected or sdram_ras_n or sdram_udqm_expected or sdram_udqm or sdram_we_n_expected or sdram_we_n or tx_start_expected or tx_start or wrf_use_expected or wrf_use)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected clk_100m = %b | expected rdf_use = %b | expected rs232_tx = %b | expected sdram_addr = %b | expected sdram_ba = %b | expected sdram_cas_n = %b | expected sdram_cke = %b | expected sdram_clk = %b | expected sdram_cs_n = %b | expected sdram_data = %b | expected sdram_ldqm = %b | expected sdram_ras_n = %b | expected sdram_udqm = %b | expected sdram_we_n = %b | expected tx_start = %b | expected wrf_use = %b | ",clk_100m_expected_prev,rdf_use_expected_prev,rs232_tx_expected_prev,sdram_addr_expected_prev,sdram_ba_expected_prev,sdram_cas_n_expected_prev,sdram_cke_expected_prev,sdram_clk_expected_prev,sdram_cs_n_expected_prev,sdram_data_expected_prev,sdram_ldqm_expected_prev,sdram_ras_n_expected_prev,sdram_udqm_expected_prev,sdram_we_n_expected_prev,tx_start_expected_prev,wrf_use_expected_prev);
	$display("| real clk_100m = %b | real rdf_use = %b | real rs232_tx = %b | real sdram_addr = %b | real sdram_ba = %b | real sdram_cas_n = %b | real sdram_cke = %b | real sdram_clk = %b | real sdram_cs_n = %b | real sdram_data = %b | real sdram_ldqm = %b | real sdram_ras_n = %b | real sdram_udqm = %b | real sdram_we_n = %b | real tx_start = %b | real wrf_use = %b | ",clk_100m_prev,rdf_use_prev,rs232_tx_prev,sdram_addr_prev,sdram_ba_prev,sdram_cas_n_prev,sdram_cke_prev,sdram_clk_prev,sdram_cs_n_prev,sdram_data_prev,sdram_ldqm_prev,sdram_ras_n_prev,sdram_udqm_prev,sdram_we_n_prev,tx_start_prev,wrf_use_prev);
`endif
	if (
		( clk_100m_expected_prev !== 1'bx ) && ( clk_100m_prev !== clk_100m_expected_prev )
		&& ((clk_100m_expected_prev !== last_clk_100m_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port clk_100m :: @time = %t",  $realtime);
		$display ("     Expected value = %b", clk_100m_expected_prev);
		$display ("     Real value = %b", clk_100m_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_clk_100m_exp = clk_100m_expected_prev;
	end
	if (
		( sdram_clk_expected_prev !== 1'bx ) && ( sdram_clk_prev !== sdram_clk_expected_prev )
		&& ((sdram_clk_expected_prev !== last_sdram_clk_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_clk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_clk_expected_prev);
		$display ("     Real value = %b", sdram_clk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_sdram_clk_exp = sdram_clk_expected_prev;
	end
	if (
		( sdram_data_expected_prev[0] !== 1'bx ) && ( sdram_data_prev[0] !== sdram_data_expected_prev[0] )
		&& ((sdram_data_expected_prev[0] !== last_sdram_data_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[0] = sdram_data_expected_prev[0];
	end
	if (
		( sdram_data_expected_prev[1] !== 1'bx ) && ( sdram_data_prev[1] !== sdram_data_expected_prev[1] )
		&& ((sdram_data_expected_prev[1] !== last_sdram_data_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[1] = sdram_data_expected_prev[1];
	end
	if (
		( sdram_data_expected_prev[2] !== 1'bx ) && ( sdram_data_prev[2] !== sdram_data_expected_prev[2] )
		&& ((sdram_data_expected_prev[2] !== last_sdram_data_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[2] = sdram_data_expected_prev[2];
	end
	if (
		( sdram_data_expected_prev[3] !== 1'bx ) && ( sdram_data_prev[3] !== sdram_data_expected_prev[3] )
		&& ((sdram_data_expected_prev[3] !== last_sdram_data_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[3] = sdram_data_expected_prev[3];
	end
	if (
		( sdram_data_expected_prev[4] !== 1'bx ) && ( sdram_data_prev[4] !== sdram_data_expected_prev[4] )
		&& ((sdram_data_expected_prev[4] !== last_sdram_data_exp[4]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[4] = sdram_data_expected_prev[4];
	end
	if (
		( sdram_data_expected_prev[5] !== 1'bx ) && ( sdram_data_prev[5] !== sdram_data_expected_prev[5] )
		&& ((sdram_data_expected_prev[5] !== last_sdram_data_exp[5]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[5] = sdram_data_expected_prev[5];
	end
	if (
		( sdram_data_expected_prev[6] !== 1'bx ) && ( sdram_data_prev[6] !== sdram_data_expected_prev[6] )
		&& ((sdram_data_expected_prev[6] !== last_sdram_data_exp[6]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[6] = sdram_data_expected_prev[6];
	end
	if (
		( sdram_data_expected_prev[7] !== 1'bx ) && ( sdram_data_prev[7] !== sdram_data_expected_prev[7] )
		&& ((sdram_data_expected_prev[7] !== last_sdram_data_exp[7]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[7] = sdram_data_expected_prev[7];
	end
	if (
		( sdram_data_expected_prev[8] !== 1'bx ) && ( sdram_data_prev[8] !== sdram_data_expected_prev[8] )
		&& ((sdram_data_expected_prev[8] !== last_sdram_data_exp[8]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[8] = sdram_data_expected_prev[8];
	end
	if (
		( sdram_data_expected_prev[9] !== 1'bx ) && ( sdram_data_prev[9] !== sdram_data_expected_prev[9] )
		&& ((sdram_data_expected_prev[9] !== last_sdram_data_exp[9]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[9] = sdram_data_expected_prev[9];
	end
	if (
		( sdram_data_expected_prev[10] !== 1'bx ) && ( sdram_data_prev[10] !== sdram_data_expected_prev[10] )
		&& ((sdram_data_expected_prev[10] !== last_sdram_data_exp[10]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[10] = sdram_data_expected_prev[10];
	end
	if (
		( sdram_data_expected_prev[11] !== 1'bx ) && ( sdram_data_prev[11] !== sdram_data_expected_prev[11] )
		&& ((sdram_data_expected_prev[11] !== last_sdram_data_exp[11]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[11] = sdram_data_expected_prev[11];
	end
	if (
		( sdram_data_expected_prev[12] !== 1'bx ) && ( sdram_data_prev[12] !== sdram_data_expected_prev[12] )
		&& ((sdram_data_expected_prev[12] !== last_sdram_data_exp[12]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[12] = sdram_data_expected_prev[12];
	end
	if (
		( sdram_data_expected_prev[13] !== 1'bx ) && ( sdram_data_prev[13] !== sdram_data_expected_prev[13] )
		&& ((sdram_data_expected_prev[13] !== last_sdram_data_exp[13]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[13] = sdram_data_expected_prev[13];
	end
	if (
		( sdram_data_expected_prev[14] !== 1'bx ) && ( sdram_data_prev[14] !== sdram_data_expected_prev[14] )
		&& ((sdram_data_expected_prev[14] !== last_sdram_data_exp[14]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[14] = sdram_data_expected_prev[14];
	end
	if (
		( sdram_data_expected_prev[15] !== 1'bx ) && ( sdram_data_prev[15] !== sdram_data_expected_prev[15] )
		&& ((sdram_data_expected_prev[15] !== last_sdram_data_exp[15]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sdram_data[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sdram_data_expected_prev);
		$display ("     Real value = %b", sdram_data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_sdram_data_exp[15] = sdram_data_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module sdr_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg rst_n;
reg [15:0] treg_sdram_data;
// wires                                               
wire clk_100m;
wire [8:0] rdf_use;
wire rs232_tx;
wire [12:0] sdram_addr;
wire [1:0] sdram_ba;
wire sdram_cas_n;
wire sdram_cke;
wire sdram_clk;
wire sdram_cs_n;
wire [15:0] sdram_data;
wire sdram_ldqm;
wire sdram_ras_n;
wire sdram_udqm;
wire sdram_we_n;
wire tx_start;
wire [8:0] wrf_use;

wire sampler;                             

// assign statements (if any)                          
assign sdram_data = treg_sdram_data;
sdr_test i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.clk_100m(clk_100m),
	.rdf_use(rdf_use),
	.rs232_tx(rs232_tx),
	.rst_n(rst_n),
	.sdram_addr(sdram_addr),
	.sdram_ba(sdram_ba),
	.sdram_cas_n(sdram_cas_n),
	.sdram_cke(sdram_cke),
	.sdram_clk(sdram_clk),
	.sdram_cs_n(sdram_cs_n),
	.sdram_data(sdram_data),
	.sdram_ldqm(sdram_ldqm),
	.sdram_ras_n(sdram_ras_n),
	.sdram_udqm(sdram_udqm),
	.sdram_we_n(sdram_we_n),
	.tx_start(tx_start),
	.wrf_use(wrf_use)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// sdram_data[ 15 ]
initial
begin
	treg_sdram_data[15] = 1'bZ;
end 
// sdram_data[ 14 ]
initial
begin
	treg_sdram_data[14] = 1'bZ;
end 
// sdram_data[ 13 ]
initial
begin
	treg_sdram_data[13] = 1'bZ;
end 
// sdram_data[ 12 ]
initial
begin
	treg_sdram_data[12] = 1'bZ;
end 
// sdram_data[ 11 ]
initial
begin
	treg_sdram_data[11] = 1'bZ;
end 
// sdram_data[ 10 ]
initial
begin
	treg_sdram_data[10] = 1'bZ;
end 
// sdram_data[ 9 ]
initial
begin
	treg_sdram_data[9] = 1'bZ;
end 
// sdram_data[ 8 ]
initial
begin
	treg_sdram_data[8] = 1'bZ;
end 
// sdram_data[ 7 ]
initial
begin
	treg_sdram_data[7] = 1'bZ;
end 
// sdram_data[ 6 ]
initial
begin
	treg_sdram_data[6] = 1'bZ;
end 
// sdram_data[ 5 ]
initial
begin
	treg_sdram_data[5] = 1'bZ;
end 
// sdram_data[ 4 ]
initial
begin
	treg_sdram_data[4] = 1'bZ;
end 
// sdram_data[ 3 ]
initial
begin
	treg_sdram_data[3] = 1'bZ;
end 
// sdram_data[ 2 ]
initial
begin
	treg_sdram_data[2] = 1'bZ;
end 
// sdram_data[ 1 ]
initial
begin
	treg_sdram_data[1] = 1'bZ;
end 
// sdram_data[ 0 ]
initial
begin
	treg_sdram_data[0] = 1'bZ;
end 

sdr_test_vlg_sample_tst tb_sample (
	.clk(clk),
	.rst_n(rst_n),
	.sdram_data(sdram_data),
	.sampler_tx(sampler)
);

sdr_test_vlg_check_tst tb_out(
	.clk_100m(clk_100m),
	.rdf_use(rdf_use),
	.rs232_tx(rs232_tx),
	.sdram_addr(sdram_addr),
	.sdram_ba(sdram_ba),
	.sdram_cas_n(sdram_cas_n),
	.sdram_cke(sdram_cke),
	.sdram_clk(sdram_clk),
	.sdram_cs_n(sdram_cs_n),
	.sdram_data(sdram_data),
	.sdram_ldqm(sdram_ldqm),
	.sdram_ras_n(sdram_ras_n),
	.sdram_udqm(sdram_udqm),
	.sdram_we_n(sdram_we_n),
	.tx_start(tx_start),
	.wrf_use(wrf_use),
	.sampler_rx(sampler)
);
endmodule

