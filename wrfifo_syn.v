// megafunction wizard: %FIFO%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: dcfifo 

// ============================================================
// File Name: wrfifo.v
// Megafunction Name(s):
// 			dcfifo
//
// Simulation Library Files(s):
// 			
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 13.1.0 Build 162 10/23/2013 SJ Web Edition
// ************************************************************


//Copyright (C) 1991-2013 Altera Corporation
//Your use of Altera Corporation's design tools, logic functions 
//and other software and tools, and its AMPP partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Altera Program License 
//Subscription Agreement, Altera MegaCore Function License 
//Agreement, or other applicable license agreement, including, 
//without limitation, that your use is for the sole purpose of 
//programming logic devices manufactured by Altera and sold by 
//Altera or its authorized distributors.  Please refer to the 
//applicable agreement for further details.


//dcfifo_mixed_widths ADD_RAM_OUTPUT_REGISTER="OFF" CLOCKS_ARE_SYNCHRONIZED="TRUE" DEVICE_FAMILY="Cyclone" LPM_NUMWORDS=512 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTH_R=16 LPM_WIDTHU=9 LPM_WIDTHU_R=9 OVERFLOW_CHECKING="ON" RAM_BLOCK_TYPE="M4K" UNDERFLOW_CHECKING="ON" USE_EAB="ON" data q rdclk rdreq wrclk wrreq wrusedw INTENDED_DEVICE_FAMILY="Cyclone" lpm_hint="RAM_BLOCK_TYPE=M4K" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
//VERSION_BEGIN 13.1 cbx_a_gray2bin 2013:10:23:18:05:48:SJ cbx_a_graycounter 2013:10:23:18:05:48:SJ cbx_altdpram 2013:10:23:18:05:48:SJ cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_dcfifo 2013:10:23:18:05:48:SJ cbx_fifo_common 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_scfifo 2013:10:23:18:05:48:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//alt_sync_fifo DEVICE_FAMILY="Cyclone" LPM_NUMWORDS=512 LPM_SHOWAHEAD="OFF" LPM_WIDTH=16 LPM_WIDTHU=9 OVERFLOW_CHECKING="ON" UNDERFLOW_CHECKING="ON" USE_EAB="ON" aclr data q rdclk rdreq wrclk wrreq wrusedw
//VERSION_BEGIN 13.1 cbx_a_gray2bin 2013:10:23:18:05:48:SJ cbx_a_graycounter 2013:10:23:18:05:48:SJ cbx_altdpram 2013:10:23:18:05:48:SJ cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_dcfifo 2013:10:23:18:05:48:SJ cbx_fifo_common 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_scfifo 2013:10:23:18:05:48:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


//altdpram DEVICE_FAMILY="Cyclone" INTENDED_DEVICE_FAMILY="Cyclone" lpm_hint="RAM_BLOCK_TYPE=M4K" OUTDATA_REG="UNREGISTERED" RAM_BLOCK_TYPE="M4K" RDCONTROL_ACLR="OFF" RDCONTROL_REG="UNREGISTERED" SUPPRESS_MEMORY_CONVERSION_WARNINGS="ON" USE_EAB="ON" WIDTH=16 WIDTHAD=9 data inclock outclock outclocken q rdaddress wraddress wren
//VERSION_BEGIN 13.1 cbx_altdpram 2013:10:23:18:05:48:SJ cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END


//altsyncram ADDRESS_ACLR_A="NONE" ADDRESS_ACLR_B="NONE" ADDRESS_REG_B="CLOCK1" DEVICE_FAMILY="Cyclone" INDATA_ACLR_A="NONE" OPERATION_MODE="DUAL_PORT" OUTDATA_ACLR_B="NONE" OUTDATA_REG_B="UNREGISTERED" RAM_BLOCK_TYPE="M4K" RDCONTROL_ACLR_B="NONE" RDCONTROL_REG_B="CLOCK0" READ_DURING_WRITE_MODE_MIXED_PORTS="DONT_CARE" WIDTH_A=16 WIDTH_B=16 WIDTH_BYTEENA_A=2 WIDTH_BYTEENA_B=2 WIDTHAD_A=9 WIDTHAD_B=9 WRCONTROL_ACLR_A="NONE" address_a address_b clock0 clock1 clocken1 data_a q_b wren_a
//VERSION_BEGIN 13.1 cbx_altsyncram 2013:10:23:18:05:48:SJ cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_lpm_mux 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ cbx_stratixiii 2013:10:23:18:05:48:SJ cbx_stratixv 2013:10:23:18:05:48:SJ cbx_util_mgl 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = M4K 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"OPTIMIZE_POWER_DURING_SYNTHESIS=NORMAL_COMPILATION"} *)
module  wrfifo_altsyncram
	( 
	address_a,
	address_b,
	clock0,
	clock1,
	clocken1,
	data_a,
	q_b,
	wren_a) /* synthesis synthesis_clearbox=1 */;
	input   [8:0]  address_a;
	input   [8:0]  address_b;
	input   clock0;
	input   clock1;
	input   clocken1;
	input   [15:0]  data_a;
	output   [15:0]  q_b;
	input   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   [8:0]  address_b;
	tri1   clock0;
	tri1   clock1;
	tri1   clocken1;
	tri1   [15:0]  data_a;
	tri0   wren_a;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_ram_block15a_0portbdataout;
	wire  [0:0]   wire_ram_block15a_1portbdataout;
	wire  [0:0]   wire_ram_block15a_2portbdataout;
	wire  [0:0]   wire_ram_block15a_3portbdataout;
	wire  [0:0]   wire_ram_block15a_4portbdataout;
	wire  [0:0]   wire_ram_block15a_5portbdataout;
	wire  [0:0]   wire_ram_block15a_6portbdataout;
	wire  [0:0]   wire_ram_block15a_7portbdataout;
	wire  [0:0]   wire_ram_block15a_8portbdataout;
	wire  [0:0]   wire_ram_block15a_9portbdataout;
	wire  [0:0]   wire_ram_block15a_10portbdataout;
	wire  [0:0]   wire_ram_block15a_11portbdataout;
	wire  [0:0]   wire_ram_block15a_12portbdataout;
	wire  [0:0]   wire_ram_block15a_13portbdataout;
	wire  [0:0]   wire_ram_block15a_14portbdataout;
	wire  [0:0]   wire_ram_block15a_15portbdataout;
	wire  [8:0]  address_a_wire;
	wire  [8:0]  address_b_wire;

	cyclone_ram_block   ram_block15a_0
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[0]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_0portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_0.connectivity_checking = "OFF",
		ram_block15a_0.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_0.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_0.operation_mode = "dual_port",
		ram_block15a_0.port_a_address_clear = "none",
		ram_block15a_0.port_a_address_width = 9,
		ram_block15a_0.port_a_data_in_clear = "none",
		ram_block15a_0.port_a_data_width = 1,
		ram_block15a_0.port_a_first_address = 0,
		ram_block15a_0.port_a_first_bit_number = 0,
		ram_block15a_0.port_a_last_address = 511,
		ram_block15a_0.port_a_logical_ram_depth = 512,
		ram_block15a_0.port_a_logical_ram_width = 16,
		ram_block15a_0.port_a_write_enable_clear = "none",
		ram_block15a_0.port_b_address_clear = "none",
		ram_block15a_0.port_b_address_clock = "clock1",
		ram_block15a_0.port_b_address_width = 9,
		ram_block15a_0.port_b_data_out_clear = "none",
		ram_block15a_0.port_b_data_out_clock = "none",
		ram_block15a_0.port_b_data_width = 1,
		ram_block15a_0.port_b_first_address = 0,
		ram_block15a_0.port_b_first_bit_number = 0,
		ram_block15a_0.port_b_last_address = 511,
		ram_block15a_0.port_b_logical_ram_depth = 512,
		ram_block15a_0.port_b_logical_ram_width = 16,
		ram_block15a_0.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_0.ram_block_type = "M4K",
		ram_block15a_0.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_1
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[1]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_1portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_1.connectivity_checking = "OFF",
		ram_block15a_1.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_1.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_1.operation_mode = "dual_port",
		ram_block15a_1.port_a_address_clear = "none",
		ram_block15a_1.port_a_address_width = 9,
		ram_block15a_1.port_a_data_in_clear = "none",
		ram_block15a_1.port_a_data_width = 1,
		ram_block15a_1.port_a_first_address = 0,
		ram_block15a_1.port_a_first_bit_number = 1,
		ram_block15a_1.port_a_last_address = 511,
		ram_block15a_1.port_a_logical_ram_depth = 512,
		ram_block15a_1.port_a_logical_ram_width = 16,
		ram_block15a_1.port_a_write_enable_clear = "none",
		ram_block15a_1.port_b_address_clear = "none",
		ram_block15a_1.port_b_address_clock = "clock1",
		ram_block15a_1.port_b_address_width = 9,
		ram_block15a_1.port_b_data_out_clear = "none",
		ram_block15a_1.port_b_data_out_clock = "none",
		ram_block15a_1.port_b_data_width = 1,
		ram_block15a_1.port_b_first_address = 0,
		ram_block15a_1.port_b_first_bit_number = 1,
		ram_block15a_1.port_b_last_address = 511,
		ram_block15a_1.port_b_logical_ram_depth = 512,
		ram_block15a_1.port_b_logical_ram_width = 16,
		ram_block15a_1.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_1.ram_block_type = "M4K",
		ram_block15a_1.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_2
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[2]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_2portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_2.connectivity_checking = "OFF",
		ram_block15a_2.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_2.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_2.operation_mode = "dual_port",
		ram_block15a_2.port_a_address_clear = "none",
		ram_block15a_2.port_a_address_width = 9,
		ram_block15a_2.port_a_data_in_clear = "none",
		ram_block15a_2.port_a_data_width = 1,
		ram_block15a_2.port_a_first_address = 0,
		ram_block15a_2.port_a_first_bit_number = 2,
		ram_block15a_2.port_a_last_address = 511,
		ram_block15a_2.port_a_logical_ram_depth = 512,
		ram_block15a_2.port_a_logical_ram_width = 16,
		ram_block15a_2.port_a_write_enable_clear = "none",
		ram_block15a_2.port_b_address_clear = "none",
		ram_block15a_2.port_b_address_clock = "clock1",
		ram_block15a_2.port_b_address_width = 9,
		ram_block15a_2.port_b_data_out_clear = "none",
		ram_block15a_2.port_b_data_out_clock = "none",
		ram_block15a_2.port_b_data_width = 1,
		ram_block15a_2.port_b_first_address = 0,
		ram_block15a_2.port_b_first_bit_number = 2,
		ram_block15a_2.port_b_last_address = 511,
		ram_block15a_2.port_b_logical_ram_depth = 512,
		ram_block15a_2.port_b_logical_ram_width = 16,
		ram_block15a_2.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_2.ram_block_type = "M4K",
		ram_block15a_2.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_3
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[3]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_3portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_3.connectivity_checking = "OFF",
		ram_block15a_3.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_3.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_3.operation_mode = "dual_port",
		ram_block15a_3.port_a_address_clear = "none",
		ram_block15a_3.port_a_address_width = 9,
		ram_block15a_3.port_a_data_in_clear = "none",
		ram_block15a_3.port_a_data_width = 1,
		ram_block15a_3.port_a_first_address = 0,
		ram_block15a_3.port_a_first_bit_number = 3,
		ram_block15a_3.port_a_last_address = 511,
		ram_block15a_3.port_a_logical_ram_depth = 512,
		ram_block15a_3.port_a_logical_ram_width = 16,
		ram_block15a_3.port_a_write_enable_clear = "none",
		ram_block15a_3.port_b_address_clear = "none",
		ram_block15a_3.port_b_address_clock = "clock1",
		ram_block15a_3.port_b_address_width = 9,
		ram_block15a_3.port_b_data_out_clear = "none",
		ram_block15a_3.port_b_data_out_clock = "none",
		ram_block15a_3.port_b_data_width = 1,
		ram_block15a_3.port_b_first_address = 0,
		ram_block15a_3.port_b_first_bit_number = 3,
		ram_block15a_3.port_b_last_address = 511,
		ram_block15a_3.port_b_logical_ram_depth = 512,
		ram_block15a_3.port_b_logical_ram_width = 16,
		ram_block15a_3.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_3.ram_block_type = "M4K",
		ram_block15a_3.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_4
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[4]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_4portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_4.connectivity_checking = "OFF",
		ram_block15a_4.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_4.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_4.operation_mode = "dual_port",
		ram_block15a_4.port_a_address_clear = "none",
		ram_block15a_4.port_a_address_width = 9,
		ram_block15a_4.port_a_data_in_clear = "none",
		ram_block15a_4.port_a_data_width = 1,
		ram_block15a_4.port_a_first_address = 0,
		ram_block15a_4.port_a_first_bit_number = 4,
		ram_block15a_4.port_a_last_address = 511,
		ram_block15a_4.port_a_logical_ram_depth = 512,
		ram_block15a_4.port_a_logical_ram_width = 16,
		ram_block15a_4.port_a_write_enable_clear = "none",
		ram_block15a_4.port_b_address_clear = "none",
		ram_block15a_4.port_b_address_clock = "clock1",
		ram_block15a_4.port_b_address_width = 9,
		ram_block15a_4.port_b_data_out_clear = "none",
		ram_block15a_4.port_b_data_out_clock = "none",
		ram_block15a_4.port_b_data_width = 1,
		ram_block15a_4.port_b_first_address = 0,
		ram_block15a_4.port_b_first_bit_number = 4,
		ram_block15a_4.port_b_last_address = 511,
		ram_block15a_4.port_b_logical_ram_depth = 512,
		ram_block15a_4.port_b_logical_ram_width = 16,
		ram_block15a_4.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_4.ram_block_type = "M4K",
		ram_block15a_4.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_5
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[5]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_5portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_5.connectivity_checking = "OFF",
		ram_block15a_5.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_5.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_5.operation_mode = "dual_port",
		ram_block15a_5.port_a_address_clear = "none",
		ram_block15a_5.port_a_address_width = 9,
		ram_block15a_5.port_a_data_in_clear = "none",
		ram_block15a_5.port_a_data_width = 1,
		ram_block15a_5.port_a_first_address = 0,
		ram_block15a_5.port_a_first_bit_number = 5,
		ram_block15a_5.port_a_last_address = 511,
		ram_block15a_5.port_a_logical_ram_depth = 512,
		ram_block15a_5.port_a_logical_ram_width = 16,
		ram_block15a_5.port_a_write_enable_clear = "none",
		ram_block15a_5.port_b_address_clear = "none",
		ram_block15a_5.port_b_address_clock = "clock1",
		ram_block15a_5.port_b_address_width = 9,
		ram_block15a_5.port_b_data_out_clear = "none",
		ram_block15a_5.port_b_data_out_clock = "none",
		ram_block15a_5.port_b_data_width = 1,
		ram_block15a_5.port_b_first_address = 0,
		ram_block15a_5.port_b_first_bit_number = 5,
		ram_block15a_5.port_b_last_address = 511,
		ram_block15a_5.port_b_logical_ram_depth = 512,
		ram_block15a_5.port_b_logical_ram_width = 16,
		ram_block15a_5.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_5.ram_block_type = "M4K",
		ram_block15a_5.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_6
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[6]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_6portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_6.connectivity_checking = "OFF",
		ram_block15a_6.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_6.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_6.operation_mode = "dual_port",
		ram_block15a_6.port_a_address_clear = "none",
		ram_block15a_6.port_a_address_width = 9,
		ram_block15a_6.port_a_data_in_clear = "none",
		ram_block15a_6.port_a_data_width = 1,
		ram_block15a_6.port_a_first_address = 0,
		ram_block15a_6.port_a_first_bit_number = 6,
		ram_block15a_6.port_a_last_address = 511,
		ram_block15a_6.port_a_logical_ram_depth = 512,
		ram_block15a_6.port_a_logical_ram_width = 16,
		ram_block15a_6.port_a_write_enable_clear = "none",
		ram_block15a_6.port_b_address_clear = "none",
		ram_block15a_6.port_b_address_clock = "clock1",
		ram_block15a_6.port_b_address_width = 9,
		ram_block15a_6.port_b_data_out_clear = "none",
		ram_block15a_6.port_b_data_out_clock = "none",
		ram_block15a_6.port_b_data_width = 1,
		ram_block15a_6.port_b_first_address = 0,
		ram_block15a_6.port_b_first_bit_number = 6,
		ram_block15a_6.port_b_last_address = 511,
		ram_block15a_6.port_b_logical_ram_depth = 512,
		ram_block15a_6.port_b_logical_ram_width = 16,
		ram_block15a_6.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_6.ram_block_type = "M4K",
		ram_block15a_6.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_7
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[7]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_7portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_7.connectivity_checking = "OFF",
		ram_block15a_7.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_7.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_7.operation_mode = "dual_port",
		ram_block15a_7.port_a_address_clear = "none",
		ram_block15a_7.port_a_address_width = 9,
		ram_block15a_7.port_a_data_in_clear = "none",
		ram_block15a_7.port_a_data_width = 1,
		ram_block15a_7.port_a_first_address = 0,
		ram_block15a_7.port_a_first_bit_number = 7,
		ram_block15a_7.port_a_last_address = 511,
		ram_block15a_7.port_a_logical_ram_depth = 512,
		ram_block15a_7.port_a_logical_ram_width = 16,
		ram_block15a_7.port_a_write_enable_clear = "none",
		ram_block15a_7.port_b_address_clear = "none",
		ram_block15a_7.port_b_address_clock = "clock1",
		ram_block15a_7.port_b_address_width = 9,
		ram_block15a_7.port_b_data_out_clear = "none",
		ram_block15a_7.port_b_data_out_clock = "none",
		ram_block15a_7.port_b_data_width = 1,
		ram_block15a_7.port_b_first_address = 0,
		ram_block15a_7.port_b_first_bit_number = 7,
		ram_block15a_7.port_b_last_address = 511,
		ram_block15a_7.port_b_logical_ram_depth = 512,
		ram_block15a_7.port_b_logical_ram_width = 16,
		ram_block15a_7.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_7.ram_block_type = "M4K",
		ram_block15a_7.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_8
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[8]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_8portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_8.connectivity_checking = "OFF",
		ram_block15a_8.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_8.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_8.operation_mode = "dual_port",
		ram_block15a_8.port_a_address_clear = "none",
		ram_block15a_8.port_a_address_width = 9,
		ram_block15a_8.port_a_data_in_clear = "none",
		ram_block15a_8.port_a_data_width = 1,
		ram_block15a_8.port_a_first_address = 0,
		ram_block15a_8.port_a_first_bit_number = 8,
		ram_block15a_8.port_a_last_address = 511,
		ram_block15a_8.port_a_logical_ram_depth = 512,
		ram_block15a_8.port_a_logical_ram_width = 16,
		ram_block15a_8.port_a_write_enable_clear = "none",
		ram_block15a_8.port_b_address_clear = "none",
		ram_block15a_8.port_b_address_clock = "clock1",
		ram_block15a_8.port_b_address_width = 9,
		ram_block15a_8.port_b_data_out_clear = "none",
		ram_block15a_8.port_b_data_out_clock = "none",
		ram_block15a_8.port_b_data_width = 1,
		ram_block15a_8.port_b_first_address = 0,
		ram_block15a_8.port_b_first_bit_number = 8,
		ram_block15a_8.port_b_last_address = 511,
		ram_block15a_8.port_b_logical_ram_depth = 512,
		ram_block15a_8.port_b_logical_ram_width = 16,
		ram_block15a_8.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_8.ram_block_type = "M4K",
		ram_block15a_8.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_9
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[9]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_9portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_9.connectivity_checking = "OFF",
		ram_block15a_9.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_9.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_9.operation_mode = "dual_port",
		ram_block15a_9.port_a_address_clear = "none",
		ram_block15a_9.port_a_address_width = 9,
		ram_block15a_9.port_a_data_in_clear = "none",
		ram_block15a_9.port_a_data_width = 1,
		ram_block15a_9.port_a_first_address = 0,
		ram_block15a_9.port_a_first_bit_number = 9,
		ram_block15a_9.port_a_last_address = 511,
		ram_block15a_9.port_a_logical_ram_depth = 512,
		ram_block15a_9.port_a_logical_ram_width = 16,
		ram_block15a_9.port_a_write_enable_clear = "none",
		ram_block15a_9.port_b_address_clear = "none",
		ram_block15a_9.port_b_address_clock = "clock1",
		ram_block15a_9.port_b_address_width = 9,
		ram_block15a_9.port_b_data_out_clear = "none",
		ram_block15a_9.port_b_data_out_clock = "none",
		ram_block15a_9.port_b_data_width = 1,
		ram_block15a_9.port_b_first_address = 0,
		ram_block15a_9.port_b_first_bit_number = 9,
		ram_block15a_9.port_b_last_address = 511,
		ram_block15a_9.port_b_logical_ram_depth = 512,
		ram_block15a_9.port_b_logical_ram_width = 16,
		ram_block15a_9.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_9.ram_block_type = "M4K",
		ram_block15a_9.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_10
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[10]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_10portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_10.connectivity_checking = "OFF",
		ram_block15a_10.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_10.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_10.operation_mode = "dual_port",
		ram_block15a_10.port_a_address_clear = "none",
		ram_block15a_10.port_a_address_width = 9,
		ram_block15a_10.port_a_data_in_clear = "none",
		ram_block15a_10.port_a_data_width = 1,
		ram_block15a_10.port_a_first_address = 0,
		ram_block15a_10.port_a_first_bit_number = 10,
		ram_block15a_10.port_a_last_address = 511,
		ram_block15a_10.port_a_logical_ram_depth = 512,
		ram_block15a_10.port_a_logical_ram_width = 16,
		ram_block15a_10.port_a_write_enable_clear = "none",
		ram_block15a_10.port_b_address_clear = "none",
		ram_block15a_10.port_b_address_clock = "clock1",
		ram_block15a_10.port_b_address_width = 9,
		ram_block15a_10.port_b_data_out_clear = "none",
		ram_block15a_10.port_b_data_out_clock = "none",
		ram_block15a_10.port_b_data_width = 1,
		ram_block15a_10.port_b_first_address = 0,
		ram_block15a_10.port_b_first_bit_number = 10,
		ram_block15a_10.port_b_last_address = 511,
		ram_block15a_10.port_b_logical_ram_depth = 512,
		ram_block15a_10.port_b_logical_ram_width = 16,
		ram_block15a_10.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_10.ram_block_type = "M4K",
		ram_block15a_10.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_11
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[11]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_11portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_11.connectivity_checking = "OFF",
		ram_block15a_11.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_11.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_11.operation_mode = "dual_port",
		ram_block15a_11.port_a_address_clear = "none",
		ram_block15a_11.port_a_address_width = 9,
		ram_block15a_11.port_a_data_in_clear = "none",
		ram_block15a_11.port_a_data_width = 1,
		ram_block15a_11.port_a_first_address = 0,
		ram_block15a_11.port_a_first_bit_number = 11,
		ram_block15a_11.port_a_last_address = 511,
		ram_block15a_11.port_a_logical_ram_depth = 512,
		ram_block15a_11.port_a_logical_ram_width = 16,
		ram_block15a_11.port_a_write_enable_clear = "none",
		ram_block15a_11.port_b_address_clear = "none",
		ram_block15a_11.port_b_address_clock = "clock1",
		ram_block15a_11.port_b_address_width = 9,
		ram_block15a_11.port_b_data_out_clear = "none",
		ram_block15a_11.port_b_data_out_clock = "none",
		ram_block15a_11.port_b_data_width = 1,
		ram_block15a_11.port_b_first_address = 0,
		ram_block15a_11.port_b_first_bit_number = 11,
		ram_block15a_11.port_b_last_address = 511,
		ram_block15a_11.port_b_logical_ram_depth = 512,
		ram_block15a_11.port_b_logical_ram_width = 16,
		ram_block15a_11.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_11.ram_block_type = "M4K",
		ram_block15a_11.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_12
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[12]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_12portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_12.connectivity_checking = "OFF",
		ram_block15a_12.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_12.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_12.operation_mode = "dual_port",
		ram_block15a_12.port_a_address_clear = "none",
		ram_block15a_12.port_a_address_width = 9,
		ram_block15a_12.port_a_data_in_clear = "none",
		ram_block15a_12.port_a_data_width = 1,
		ram_block15a_12.port_a_first_address = 0,
		ram_block15a_12.port_a_first_bit_number = 12,
		ram_block15a_12.port_a_last_address = 511,
		ram_block15a_12.port_a_logical_ram_depth = 512,
		ram_block15a_12.port_a_logical_ram_width = 16,
		ram_block15a_12.port_a_write_enable_clear = "none",
		ram_block15a_12.port_b_address_clear = "none",
		ram_block15a_12.port_b_address_clock = "clock1",
		ram_block15a_12.port_b_address_width = 9,
		ram_block15a_12.port_b_data_out_clear = "none",
		ram_block15a_12.port_b_data_out_clock = "none",
		ram_block15a_12.port_b_data_width = 1,
		ram_block15a_12.port_b_first_address = 0,
		ram_block15a_12.port_b_first_bit_number = 12,
		ram_block15a_12.port_b_last_address = 511,
		ram_block15a_12.port_b_logical_ram_depth = 512,
		ram_block15a_12.port_b_logical_ram_width = 16,
		ram_block15a_12.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_12.ram_block_type = "M4K",
		ram_block15a_12.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_13
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[13]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_13portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_13.connectivity_checking = "OFF",
		ram_block15a_13.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_13.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_13.operation_mode = "dual_port",
		ram_block15a_13.port_a_address_clear = "none",
		ram_block15a_13.port_a_address_width = 9,
		ram_block15a_13.port_a_data_in_clear = "none",
		ram_block15a_13.port_a_data_width = 1,
		ram_block15a_13.port_a_first_address = 0,
		ram_block15a_13.port_a_first_bit_number = 13,
		ram_block15a_13.port_a_last_address = 511,
		ram_block15a_13.port_a_logical_ram_depth = 512,
		ram_block15a_13.port_a_logical_ram_width = 16,
		ram_block15a_13.port_a_write_enable_clear = "none",
		ram_block15a_13.port_b_address_clear = "none",
		ram_block15a_13.port_b_address_clock = "clock1",
		ram_block15a_13.port_b_address_width = 9,
		ram_block15a_13.port_b_data_out_clear = "none",
		ram_block15a_13.port_b_data_out_clock = "none",
		ram_block15a_13.port_b_data_width = 1,
		ram_block15a_13.port_b_first_address = 0,
		ram_block15a_13.port_b_first_bit_number = 13,
		ram_block15a_13.port_b_last_address = 511,
		ram_block15a_13.port_b_logical_ram_depth = 512,
		ram_block15a_13.port_b_logical_ram_width = 16,
		ram_block15a_13.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_13.ram_block_type = "M4K",
		ram_block15a_13.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_14
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[14]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_14portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_14.connectivity_checking = "OFF",
		ram_block15a_14.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_14.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_14.operation_mode = "dual_port",
		ram_block15a_14.port_a_address_clear = "none",
		ram_block15a_14.port_a_address_width = 9,
		ram_block15a_14.port_a_data_in_clear = "none",
		ram_block15a_14.port_a_data_width = 1,
		ram_block15a_14.port_a_first_address = 0,
		ram_block15a_14.port_a_first_bit_number = 14,
		ram_block15a_14.port_a_last_address = 511,
		ram_block15a_14.port_a_logical_ram_depth = 512,
		ram_block15a_14.port_a_logical_ram_width = 16,
		ram_block15a_14.port_a_write_enable_clear = "none",
		ram_block15a_14.port_b_address_clear = "none",
		ram_block15a_14.port_b_address_clock = "clock1",
		ram_block15a_14.port_b_address_width = 9,
		ram_block15a_14.port_b_data_out_clear = "none",
		ram_block15a_14.port_b_data_out_clock = "none",
		ram_block15a_14.port_b_data_width = 1,
		ram_block15a_14.port_b_first_address = 0,
		ram_block15a_14.port_b_first_bit_number = 14,
		ram_block15a_14.port_b_last_address = 511,
		ram_block15a_14.port_b_logical_ram_depth = 512,
		ram_block15a_14.port_b_logical_ram_width = 16,
		ram_block15a_14.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_14.ram_block_type = "M4K",
		ram_block15a_14.lpm_type = "cyclone_ram_block";
	cyclone_ram_block   ram_block15a_15
	( 
	.clk0(clock0),
	.clk1(clock1),
	.ena0(wren_a),
	.ena1(clocken1),
	.portaaddr({address_a_wire[8:0]}),
	.portadatain({data_a[15]}),
	.portadataout(),
	.portawe(wren_a),
	.portbaddr({address_b_wire[8:0]}),
	.portbdataout(wire_ram_block15a_15portbdataout[0:0]),
	.portbrewe(1'b1)
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_off
	`endif
	,
	.clr0(1'b0),
	.clr1(1'b0),
	.portabyteenamasks({1{1'b1}}),
	.portbbyteenamasks({1{1'b1}}),
	.portbdatain({1{1'b0}})
	`ifndef FORMAL_VERIFICATION
	// synopsys translate_on
	`endif
	// synopsys translate_off
	,
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		ram_block15a_15.connectivity_checking = "OFF",
		ram_block15a_15.logical_ram_name = "ALTSYNCRAM",
		ram_block15a_15.mixed_port_feed_through_mode = "dont_care",
		ram_block15a_15.operation_mode = "dual_port",
		ram_block15a_15.port_a_address_clear = "none",
		ram_block15a_15.port_a_address_width = 9,
		ram_block15a_15.port_a_data_in_clear = "none",
		ram_block15a_15.port_a_data_width = 1,
		ram_block15a_15.port_a_first_address = 0,
		ram_block15a_15.port_a_first_bit_number = 15,
		ram_block15a_15.port_a_last_address = 511,
		ram_block15a_15.port_a_logical_ram_depth = 512,
		ram_block15a_15.port_a_logical_ram_width = 16,
		ram_block15a_15.port_a_write_enable_clear = "none",
		ram_block15a_15.port_b_address_clear = "none",
		ram_block15a_15.port_b_address_clock = "clock1",
		ram_block15a_15.port_b_address_width = 9,
		ram_block15a_15.port_b_data_out_clear = "none",
		ram_block15a_15.port_b_data_out_clock = "none",
		ram_block15a_15.port_b_data_width = 1,
		ram_block15a_15.port_b_first_address = 0,
		ram_block15a_15.port_b_first_bit_number = 15,
		ram_block15a_15.port_b_last_address = 511,
		ram_block15a_15.port_b_logical_ram_depth = 512,
		ram_block15a_15.port_b_logical_ram_width = 16,
		ram_block15a_15.port_b_read_enable_write_enable_clock = "clock1",
		ram_block15a_15.ram_block_type = "M4K",
		ram_block15a_15.lpm_type = "cyclone_ram_block";
	assign
		address_a_wire = address_a,
		address_b_wire = address_b,
		q_b = {wire_ram_block15a_15portbdataout[0], wire_ram_block15a_14portbdataout[0], wire_ram_block15a_13portbdataout[0], wire_ram_block15a_12portbdataout[0], wire_ram_block15a_11portbdataout[0], wire_ram_block15a_10portbdataout[0], wire_ram_block15a_9portbdataout[0], wire_ram_block15a_8portbdataout[0], wire_ram_block15a_7portbdataout[0], wire_ram_block15a_6portbdataout[0], wire_ram_block15a_5portbdataout[0], wire_ram_block15a_4portbdataout[0], wire_ram_block15a_3portbdataout[0], wire_ram_block15a_2portbdataout[0], wire_ram_block15a_1portbdataout[0], wire_ram_block15a_0portbdataout[0]};
endmodule //wrfifo_altsyncram

//synthesis_resources = M4K 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  wrfifo_dpram
	( 
	data,
	inclock,
	outclock,
	outclocken,
	q,
	rdaddress,
	wraddress,
	wren) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	input   inclock;
	input   outclock;
	input   outclocken;
	output   [15:0]  q;
	input   [8:0]  rdaddress;
	input   [8:0]  wraddress;
	input   wren;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1   inclock;
	tri1   outclock;
	tri1   outclocken;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [15:0]   wire_altsyncram14_q_b;

	wrfifo_altsyncram   altsyncram14
	( 
	.address_a(wraddress),
	.address_b(rdaddress),
	.clock0(inclock),
	.clock1(outclock),
	.clocken1(outclocken),
	.data_a(data),
	.q_b(wire_altsyncram14_q_b),
	.wren_a(wren));
	assign
		q = wire_altsyncram14_q_b;
endmodule //wrfifo_dpram


//lpm_add_sub DEVICE_FAMILY="Cyclone" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = lut 9 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  wrfifo_add_sub
	( 
	cout,
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	output   cout;
	input   [8:0]  dataa;
	input   [8:0]  datab;
	output   [8:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [8:0]  dataa;
	tri0   [8:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [8:0]   wire_add_sub_cella_combout;
	wire  [0:0]   wire_add_sub_cella_0cout;
	wire  [0:0]   wire_add_sub_cella_1cout;
	wire  [0:0]   wire_add_sub_cella_2cout;
	wire  [0:0]   wire_add_sub_cella_3cout;
	wire  [0:0]   wire_add_sub_cella_4cout;
	wire  [0:0]   wire_add_sub_cella_5cout;
	wire  [0:0]   wire_add_sub_cella_6cout;
	wire  [0:0]   wire_add_sub_cella_7cout;
	wire  [0:0]   wire_add_sub_cella_8cout;
	wire  [8:0]   wire_add_sub_cella_dataa;
	wire  [8:0]   wire_add_sub_cella_datab;

	cyclone_lcell   add_sub_cella_0
	( 
	.cin(1'b1),
	.combout(wire_add_sub_cella_combout[0:0]),
	.cout(wire_add_sub_cella_0cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[0:0]),
	.datab(wire_add_sub_cella_datab[0:0]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_0.cin_used = "true",
		add_sub_cella_0.lut_mask = "69b2",
		add_sub_cella_0.operation_mode = "arithmetic",
		add_sub_cella_0.sum_lutc_input = "cin",
		add_sub_cella_0.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_1
	( 
	.cin(wire_add_sub_cella_0cout[0:0]),
	.combout(wire_add_sub_cella_combout[1:1]),
	.cout(wire_add_sub_cella_1cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[1:1]),
	.datab(wire_add_sub_cella_datab[1:1]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_1.cin_used = "true",
		add_sub_cella_1.lut_mask = "69b2",
		add_sub_cella_1.operation_mode = "arithmetic",
		add_sub_cella_1.sum_lutc_input = "cin",
		add_sub_cella_1.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_2
	( 
	.cin(wire_add_sub_cella_1cout[0:0]),
	.combout(wire_add_sub_cella_combout[2:2]),
	.cout(wire_add_sub_cella_2cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[2:2]),
	.datab(wire_add_sub_cella_datab[2:2]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_2.cin_used = "true",
		add_sub_cella_2.lut_mask = "69b2",
		add_sub_cella_2.operation_mode = "arithmetic",
		add_sub_cella_2.sum_lutc_input = "cin",
		add_sub_cella_2.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_3
	( 
	.cin(wire_add_sub_cella_2cout[0:0]),
	.combout(wire_add_sub_cella_combout[3:3]),
	.cout(wire_add_sub_cella_3cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[3:3]),
	.datab(wire_add_sub_cella_datab[3:3]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_3.cin_used = "true",
		add_sub_cella_3.lut_mask = "69b2",
		add_sub_cella_3.operation_mode = "arithmetic",
		add_sub_cella_3.sum_lutc_input = "cin",
		add_sub_cella_3.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_4
	( 
	.cin(wire_add_sub_cella_3cout[0:0]),
	.combout(wire_add_sub_cella_combout[4:4]),
	.cout(wire_add_sub_cella_4cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[4:4]),
	.datab(wire_add_sub_cella_datab[4:4]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_4.cin_used = "true",
		add_sub_cella_4.lut_mask = "69b2",
		add_sub_cella_4.operation_mode = "arithmetic",
		add_sub_cella_4.sum_lutc_input = "cin",
		add_sub_cella_4.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_5
	( 
	.cin(wire_add_sub_cella_4cout[0:0]),
	.combout(wire_add_sub_cella_combout[5:5]),
	.cout(wire_add_sub_cella_5cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[5:5]),
	.datab(wire_add_sub_cella_datab[5:5]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_5.cin_used = "true",
		add_sub_cella_5.lut_mask = "69b2",
		add_sub_cella_5.operation_mode = "arithmetic",
		add_sub_cella_5.sum_lutc_input = "cin",
		add_sub_cella_5.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_6
	( 
	.cin(wire_add_sub_cella_5cout[0:0]),
	.combout(wire_add_sub_cella_combout[6:6]),
	.cout(wire_add_sub_cella_6cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[6:6]),
	.datab(wire_add_sub_cella_datab[6:6]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_6.cin_used = "true",
		add_sub_cella_6.lut_mask = "69b2",
		add_sub_cella_6.operation_mode = "arithmetic",
		add_sub_cella_6.sum_lutc_input = "cin",
		add_sub_cella_6.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_7
	( 
	.cin(wire_add_sub_cella_6cout[0:0]),
	.combout(wire_add_sub_cella_combout[7:7]),
	.cout(wire_add_sub_cella_7cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[7:7]),
	.datab(wire_add_sub_cella_datab[7:7]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_7.cin_used = "true",
		add_sub_cella_7.lut_mask = "69b2",
		add_sub_cella_7.operation_mode = "arithmetic",
		add_sub_cella_7.sum_lutc_input = "cin",
		add_sub_cella_7.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_8
	( 
	.cin(wire_add_sub_cella_7cout[0:0]),
	.combout(wire_add_sub_cella_combout[8:8]),
	.cout(wire_add_sub_cella_8cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[8:8]),
	.datab(wire_add_sub_cella_datab[8:8]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_8.cin_used = "true",
		add_sub_cella_8.lut_mask = "69b2",
		add_sub_cella_8.operation_mode = "arithmetic",
		add_sub_cella_8.sum_lutc_input = "cin",
		add_sub_cella_8.lpm_type = "cyclone_lcell";
	assign
		wire_add_sub_cella_dataa = dataa,
		wire_add_sub_cella_datab = datab;
	assign
		cout = wire_add_sub_cella_8cout[0:0],
		result = wire_add_sub_cella_combout;
endmodule //wrfifo_add_sub


//lpm_add_sub DEVICE_FAMILY="Cyclone" LPM_DIRECTION="SUB" LPM_WIDTH=10 dataa datab result
//VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = lut 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  wrfifo_add_sub1
	( 
	dataa,
	datab,
	result) /* synthesis synthesis_clearbox=1 */;
	input   [9:0]  dataa;
	input   [9:0]  datab;
	output   [9:0]  result;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   [9:0]  dataa;
	tri0   [9:0]  datab;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [9:0]   wire_add_sub_cella_combout;
	wire  [0:0]   wire_add_sub_cella_0cout;
	wire  [0:0]   wire_add_sub_cella_1cout;
	wire  [0:0]   wire_add_sub_cella_2cout;
	wire  [0:0]   wire_add_sub_cella_3cout;
	wire  [0:0]   wire_add_sub_cella_4cout;
	wire  [0:0]   wire_add_sub_cella_5cout;
	wire  [0:0]   wire_add_sub_cella_6cout;
	wire  [0:0]   wire_add_sub_cella_7cout;
	wire  [0:0]   wire_add_sub_cella_8cout;
	wire  [9:0]   wire_add_sub_cella_dataa;
	wire  [9:0]   wire_add_sub_cella_datab;

	cyclone_lcell   add_sub_cella_0
	( 
	.cin(1'b1),
	.combout(wire_add_sub_cella_combout[0:0]),
	.cout(wire_add_sub_cella_0cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[0:0]),
	.datab(wire_add_sub_cella_datab[0:0]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_0.cin_used = "true",
		add_sub_cella_0.lut_mask = "69b2",
		add_sub_cella_0.operation_mode = "arithmetic",
		add_sub_cella_0.sum_lutc_input = "cin",
		add_sub_cella_0.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_1
	( 
	.cin(wire_add_sub_cella_0cout[0:0]),
	.combout(wire_add_sub_cella_combout[1:1]),
	.cout(wire_add_sub_cella_1cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[1:1]),
	.datab(wire_add_sub_cella_datab[1:1]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_1.cin_used = "true",
		add_sub_cella_1.lut_mask = "69b2",
		add_sub_cella_1.operation_mode = "arithmetic",
		add_sub_cella_1.sum_lutc_input = "cin",
		add_sub_cella_1.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_2
	( 
	.cin(wire_add_sub_cella_1cout[0:0]),
	.combout(wire_add_sub_cella_combout[2:2]),
	.cout(wire_add_sub_cella_2cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[2:2]),
	.datab(wire_add_sub_cella_datab[2:2]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_2.cin_used = "true",
		add_sub_cella_2.lut_mask = "69b2",
		add_sub_cella_2.operation_mode = "arithmetic",
		add_sub_cella_2.sum_lutc_input = "cin",
		add_sub_cella_2.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_3
	( 
	.cin(wire_add_sub_cella_2cout[0:0]),
	.combout(wire_add_sub_cella_combout[3:3]),
	.cout(wire_add_sub_cella_3cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[3:3]),
	.datab(wire_add_sub_cella_datab[3:3]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_3.cin_used = "true",
		add_sub_cella_3.lut_mask = "69b2",
		add_sub_cella_3.operation_mode = "arithmetic",
		add_sub_cella_3.sum_lutc_input = "cin",
		add_sub_cella_3.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_4
	( 
	.cin(wire_add_sub_cella_3cout[0:0]),
	.combout(wire_add_sub_cella_combout[4:4]),
	.cout(wire_add_sub_cella_4cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[4:4]),
	.datab(wire_add_sub_cella_datab[4:4]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_4.cin_used = "true",
		add_sub_cella_4.lut_mask = "69b2",
		add_sub_cella_4.operation_mode = "arithmetic",
		add_sub_cella_4.sum_lutc_input = "cin",
		add_sub_cella_4.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_5
	( 
	.cin(wire_add_sub_cella_4cout[0:0]),
	.combout(wire_add_sub_cella_combout[5:5]),
	.cout(wire_add_sub_cella_5cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[5:5]),
	.datab(wire_add_sub_cella_datab[5:5]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_5.cin_used = "true",
		add_sub_cella_5.lut_mask = "69b2",
		add_sub_cella_5.operation_mode = "arithmetic",
		add_sub_cella_5.sum_lutc_input = "cin",
		add_sub_cella_5.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_6
	( 
	.cin(wire_add_sub_cella_5cout[0:0]),
	.combout(wire_add_sub_cella_combout[6:6]),
	.cout(wire_add_sub_cella_6cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[6:6]),
	.datab(wire_add_sub_cella_datab[6:6]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_6.cin_used = "true",
		add_sub_cella_6.lut_mask = "69b2",
		add_sub_cella_6.operation_mode = "arithmetic",
		add_sub_cella_6.sum_lutc_input = "cin",
		add_sub_cella_6.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_7
	( 
	.cin(wire_add_sub_cella_6cout[0:0]),
	.combout(wire_add_sub_cella_combout[7:7]),
	.cout(wire_add_sub_cella_7cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[7:7]),
	.datab(wire_add_sub_cella_datab[7:7]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_7.cin_used = "true",
		add_sub_cella_7.lut_mask = "69b2",
		add_sub_cella_7.operation_mode = "arithmetic",
		add_sub_cella_7.sum_lutc_input = "cin",
		add_sub_cella_7.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_8
	( 
	.cin(wire_add_sub_cella_7cout[0:0]),
	.combout(wire_add_sub_cella_combout[8:8]),
	.cout(wire_add_sub_cella_8cout[0:0]),
	.dataa(wire_add_sub_cella_dataa[8:8]),
	.datab(wire_add_sub_cella_datab[8:8]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_8.cin_used = "true",
		add_sub_cella_8.lut_mask = "69b2",
		add_sub_cella_8.operation_mode = "arithmetic",
		add_sub_cella_8.sum_lutc_input = "cin",
		add_sub_cella_8.lpm_type = "cyclone_lcell";
	cyclone_lcell   add_sub_cella_9
	( 
	.cin(wire_add_sub_cella_8cout[0:0]),
	.combout(wire_add_sub_cella_combout[9:9]),
	.cout(),
	.dataa(wire_add_sub_cella_dataa[9:9]),
	.datab(wire_add_sub_cella_datab[9:9]),
	.regout(),
	.aclr(1'b0),
	.aload(1'b0),
	.clk(1'b0),
	.datac(1'b1),
	.datad(1'b1),
	.ena(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0),
	.sclr(1'b0),
	.sload(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		add_sub_cella_9.cin_used = "true",
		add_sub_cella_9.lut_mask = "6969",
		add_sub_cella_9.operation_mode = "normal",
		add_sub_cella_9.sum_lutc_input = "cin",
		add_sub_cella_9.lpm_type = "cyclone_lcell";
	assign
		wire_add_sub_cella_dataa = dataa,
		wire_add_sub_cella_datab = datab;
	assign
		result = wire_add_sub_cella_combout;
endmodule //wrfifo_add_sub1


//lpm_counter DEVICE_FAMILY="Cyclone" lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_width=10 aclr clock cnt_en q
//VERSION_BEGIN 13.1 cbx_cycloneii 2013:10:23:18:05:48:SJ cbx_lpm_add_sub 2013:10:23:18:05:48:SJ cbx_lpm_compare 2013:10:23:18:05:48:SJ cbx_lpm_counter 2013:10:23:18:05:48:SJ cbx_lpm_decode 2013:10:23:18:05:48:SJ cbx_mgl 2013:10:23:18:06:54:SJ cbx_stratix 2013:10:23:18:05:48:SJ cbx_stratixii 2013:10:23:18:05:48:SJ  VERSION_END

//synthesis_resources = lut 10 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  wrfifo_cntr
	( 
	aclr,
	clock,
	cnt_en,
	q) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   cnt_en;
	output   [9:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri1   cnt_en;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [0:0]   wire_counter_cella_0cout;
	wire  [0:0]   wire_counter_cella_1cout;
	wire  [0:0]   wire_counter_cella_2cout;
	wire  [0:0]   wire_counter_cella_3cout;
	wire  [0:0]   wire_counter_cella_4cout;
	wire  [0:0]   wire_counter_cella_5cout;
	wire  [0:0]   wire_counter_cella_6cout;
	wire  [0:0]   wire_counter_cella_7cout;
	wire  [0:0]   wire_counter_cella_8cout;
	wire  [9:0]   wire_counter_cella_dataa;
	wire  [9:0]   wire_counter_cella_datac;
	wire  [9:0]   wire_counter_cella_regout;
	wire  aclr_actual;
	wire clk_en;
	wire [9:0]  data;
	wire  [9:0]  s_val;
	wire  [9:0]  safe_q;
	wire sclr;
	wire sload;
	wire sset;
	wire  sset_node;

	cyclone_lcell   counter_cella_0
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_0cout[0:0]),
	.dataa(wire_counter_cella_dataa[0:0]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[0:0]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[0:0]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.cin(1'b0),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_0.cin_used = "false",
		counter_cella_0.lut_mask = "66aa",
		counter_cella_0.operation_mode = "arithmetic",
		counter_cella_0.synch_mode = "on",
		counter_cella_0.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_1
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_0cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_1cout[0:0]),
	.dataa(wire_counter_cella_dataa[1:1]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[1:1]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[1:1]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_1.cin_used = "true",
		counter_cella_1.lut_mask = "6aa0",
		counter_cella_1.operation_mode = "arithmetic",
		counter_cella_1.sum_lutc_input = "cin",
		counter_cella_1.synch_mode = "on",
		counter_cella_1.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_2
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_1cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_2cout[0:0]),
	.dataa(wire_counter_cella_dataa[2:2]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[2:2]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[2:2]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_2.cin_used = "true",
		counter_cella_2.lut_mask = "6aa0",
		counter_cella_2.operation_mode = "arithmetic",
		counter_cella_2.sum_lutc_input = "cin",
		counter_cella_2.synch_mode = "on",
		counter_cella_2.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_3
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_2cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_3cout[0:0]),
	.dataa(wire_counter_cella_dataa[3:3]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[3:3]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[3:3]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_3.cin_used = "true",
		counter_cella_3.lut_mask = "6aa0",
		counter_cella_3.operation_mode = "arithmetic",
		counter_cella_3.sum_lutc_input = "cin",
		counter_cella_3.synch_mode = "on",
		counter_cella_3.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_4
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_3cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_4cout[0:0]),
	.dataa(wire_counter_cella_dataa[4:4]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[4:4]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[4:4]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_4.cin_used = "true",
		counter_cella_4.lut_mask = "6aa0",
		counter_cella_4.operation_mode = "arithmetic",
		counter_cella_4.sum_lutc_input = "cin",
		counter_cella_4.synch_mode = "on",
		counter_cella_4.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_5
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_4cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_5cout[0:0]),
	.dataa(wire_counter_cella_dataa[5:5]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[5:5]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[5:5]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_5.cin_used = "true",
		counter_cella_5.lut_mask = "6aa0",
		counter_cella_5.operation_mode = "arithmetic",
		counter_cella_5.sum_lutc_input = "cin",
		counter_cella_5.synch_mode = "on",
		counter_cella_5.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_6
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_5cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_6cout[0:0]),
	.dataa(wire_counter_cella_dataa[6:6]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[6:6]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[6:6]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_6.cin_used = "true",
		counter_cella_6.lut_mask = "6aa0",
		counter_cella_6.operation_mode = "arithmetic",
		counter_cella_6.sum_lutc_input = "cin",
		counter_cella_6.synch_mode = "on",
		counter_cella_6.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_7
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_6cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_7cout[0:0]),
	.dataa(wire_counter_cella_dataa[7:7]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[7:7]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[7:7]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_7.cin_used = "true",
		counter_cella_7.lut_mask = "6aa0",
		counter_cella_7.operation_mode = "arithmetic",
		counter_cella_7.sum_lutc_input = "cin",
		counter_cella_7.synch_mode = "on",
		counter_cella_7.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_8
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_7cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(wire_counter_cella_8cout[0:0]),
	.dataa(wire_counter_cella_dataa[8:8]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[8:8]),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[8:8]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.datad(1'b1),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_8.cin_used = "true",
		counter_cella_8.lut_mask = "6aa0",
		counter_cella_8.operation_mode = "arithmetic",
		counter_cella_8.sum_lutc_input = "cin",
		counter_cella_8.synch_mode = "on",
		counter_cella_8.lpm_type = "cyclone_lcell";
	cyclone_lcell   counter_cella_9
	( 
	.aclr(aclr_actual),
	.aload(1'b0),
	.cin(wire_counter_cella_8cout[0:0]),
	.clk(clock),
	.combout(),
	.cout(),
	.dataa(wire_counter_cella_dataa[9:9]),
	.datab(cnt_en),
	.datac(wire_counter_cella_datac[9:9]),
	.datad(1'b1),
	.ena(clk_en),
	.regout(wire_counter_cella_regout[9:9]),
	.sclr(sclr),
	.sload((sset_node | sload)),
	.inverta(1'b0),
	.regcascin(1'b0)
	// synopsys translate_off
	,
	.cin0(1'b0),
	.cin1(1'b1),
	.cout0(),
	.cout1(),
	.devclrn(1'b1),
	.devpor(1'b1)
	// synopsys translate_on
	);
	defparam
		counter_cella_9.cin_used = "true",
		counter_cella_9.lut_mask = "6aa0",
		counter_cella_9.operation_mode = "normal",
		counter_cella_9.sum_lutc_input = "cin",
		counter_cella_9.synch_mode = "on",
		counter_cella_9.lpm_type = "cyclone_lcell";
	assign
		wire_counter_cella_dataa = safe_q,
		wire_counter_cella_datac = (({10{sset}} & s_val) | ({10{(~ sset)}} & data));
	assign
		aclr_actual = aclr,
		clk_en = 1'b1,
		data = {10{1'b0}},
		q = safe_q,
		s_val = {10{1'b1}},
		safe_q = wire_counter_cella_regout,
		sclr = 1'b0,
		sload = 1'b0,
		sset = 1'b0,
		sset_node = 1'b0;
endmodule //wrfifo_cntr

//synthesis_resources = lut 102 M4K 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  wrfifo_alt_sync_fifo
	( 
	aclr,
	data,
	q,
	rdclk,
	rdempty,
	rdreq,
	rdusedw,
	wrclk,
	wrempty,
	wrfull,
	wrreq,
	wrusedw) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   [15:0]  data;
	output   [15:0]  q;
	input   rdclk;
	output   rdempty;
	input   rdreq;
	output   [8:0]  rdusedw;
	input   wrclk;
	output   wrempty;
	output   wrfull;
	input   wrreq;
	output   [8:0]  wrusedw;

	wire  [15:0]   wire_dpram4_q;
	wire  [1:0]   wire_cs10a_cin;
	wire  [1:0]   wire_cs10a_cout;
	wire  [1:0]   wire_cs10a_sin;
	wire  [1:0]   wire_cs10a_sout;
	wire  [9:0]   wire_cs11a_cin;
	wire  [9:0]   wire_cs11a_cout;
	wire  [9:0]   wire_cs11a_sin;
	wire  [9:0]   wire_cs11a_sout;
	wire  [9:0]   wire_cs12a_cin;
	wire  [9:0]   wire_cs12a_cout;
	wire  [9:0]   wire_cs12a_sin;
	wire  [9:0]   wire_cs12a_sout;
	wire  wire_cs13_cout;
	wire  wire_cs13_sout;
	wire  [9:0]   wire_cs6a_cin;
	wire  [9:0]   wire_cs6a_cout;
	wire  [9:0]   wire_cs6a_sin;
	wire  [9:0]   wire_cs6a_sout;
	reg	[9:0]	dffe5a;
	reg	[9:0]	dffe7a;
	reg	[9:0]	dffe8a;
	reg	[9:0]	dffe9a;
	wire  wire_add_sub2_cout;
	wire  [8:0]   wire_add_sub2_result;
	wire  [9:0]   wire_add_sub3_result;
	wire  [9:0]   wire_cntr1_q;
	wire  fast_feed_read;
	wire  [9:0]  read_count_actual;
	wire  [9:0]  read_delay_stratix;

	wrfifo_dpram   dpram4
	( 
	.data(data),
	.inclock(wrclk),
	.outclock(rdclk),
	.outclocken(wire_cs13_sout),
	.q(wire_dpram4_q),
	.rdaddress(read_count_actual[8:0]),
	.wraddress(wire_cntr1_q[8:0]),
	.wren(wire_cs10a_sout[1]));
	carry_sum   cs10a_0
	( 
	.cin(wire_cs10a_cin[0:0]),
	.cout(wire_cs10a_cout[0:0]),
	.sin(wire_cs10a_sin[0:0]),
	.sout(wire_cs10a_sout[0:0]));
	carry_sum   cs10a_1
	( 
	.cin(wire_cs10a_cin[1:1]),
	.cout(wire_cs10a_cout[1:1]),
	.sin(wire_cs10a_sin[1:1]),
	.sout(wire_cs10a_sout[1:1]));
	assign
		wire_cs10a_cin = {((~ wire_cs10a_cout[0]) & wrreq), ((~ (wire_cntr1_q[9] ^ dffe9a[9])) ^ wire_add_sub2_cout)},
		wire_cs10a_sin = {((~ wire_cs10a_cout[0]) & wrreq), ((~ (wire_cntr1_q[9] ^ dffe9a[9])) ^ wire_add_sub2_cout)};
	carry_sum   cs11a_0
	( 
	.cin(wire_cs11a_cin[0:0]),
	.cout(wire_cs11a_cout[0:0]),
	.sin(wire_cs11a_sin[0:0]),
	.sout(wire_cs11a_sout[0:0]));
	carry_sum   cs11a_1
	( 
	.cin(wire_cs11a_cin[1:1]),
	.cout(wire_cs11a_cout[1:1]),
	.sin(wire_cs11a_sin[1:1]),
	.sout(wire_cs11a_sout[1:1]));
	carry_sum   cs11a_2
	( 
	.cin(wire_cs11a_cin[2:2]),
	.cout(wire_cs11a_cout[2:2]),
	.sin(wire_cs11a_sin[2:2]),
	.sout(wire_cs11a_sout[2:2]));
	carry_sum   cs11a_3
	( 
	.cin(wire_cs11a_cin[3:3]),
	.cout(wire_cs11a_cout[3:3]),
	.sin(wire_cs11a_sin[3:3]),
	.sout(wire_cs11a_sout[3:3]));
	carry_sum   cs11a_4
	( 
	.cin(wire_cs11a_cin[4:4]),
	.cout(wire_cs11a_cout[4:4]),
	.sin(wire_cs11a_sin[4:4]),
	.sout(wire_cs11a_sout[4:4]));
	carry_sum   cs11a_5
	( 
	.cin(wire_cs11a_cin[5:5]),
	.cout(wire_cs11a_cout[5:5]),
	.sin(wire_cs11a_sin[5:5]),
	.sout(wire_cs11a_sout[5:5]));
	carry_sum   cs11a_6
	( 
	.cin(wire_cs11a_cin[6:6]),
	.cout(wire_cs11a_cout[6:6]),
	.sin(wire_cs11a_sin[6:6]),
	.sout(wire_cs11a_sout[6:6]));
	carry_sum   cs11a_7
	( 
	.cin(wire_cs11a_cin[7:7]),
	.cout(wire_cs11a_cout[7:7]),
	.sin(wire_cs11a_sin[7:7]),
	.sout(wire_cs11a_sout[7:7]));
	carry_sum   cs11a_8
	( 
	.cin(wire_cs11a_cin[8:8]),
	.cout(wire_cs11a_cout[8:8]),
	.sin(wire_cs11a_sin[8:8]),
	.sout(wire_cs11a_sout[8:8]));
	carry_sum   cs11a_9
	( 
	.cin(wire_cs11a_cin[9:9]),
	.cout(wire_cs11a_cout[9:9]),
	.sin(wire_cs11a_sin[9:9]),
	.sout(wire_cs11a_sout[9:9]));
	assign
		wire_cs11a_cin = {((~ (wire_cntr1_q[9:1] ^ dffe9a[9:1])) & wire_cs11a_cout[8:0]), (~ (wire_cntr1_q[0] ^ dffe9a[0]))},
		wire_cs11a_sin = {((~ (wire_cntr1_q[9:1] ^ dffe9a[9:1])) & wire_cs11a_cout[8:0]), (~ (wire_cntr1_q[0] ^ dffe9a[0]))};
	carry_sum   cs12a_0
	( 
	.cin(wire_cs12a_cin[0:0]),
	.cout(wire_cs12a_cout[0:0]),
	.sin(wire_cs12a_sin[0:0]),
	.sout(wire_cs12a_sout[0:0]));
	carry_sum   cs12a_1
	( 
	.cin(wire_cs12a_cin[1:1]),
	.cout(wire_cs12a_cout[1:1]),
	.sin(wire_cs12a_sin[1:1]),
	.sout(wire_cs12a_sout[1:1]));
	carry_sum   cs12a_2
	( 
	.cin(wire_cs12a_cin[2:2]),
	.cout(wire_cs12a_cout[2:2]),
	.sin(wire_cs12a_sin[2:2]),
	.sout(wire_cs12a_sout[2:2]));
	carry_sum   cs12a_3
	( 
	.cin(wire_cs12a_cin[3:3]),
	.cout(wire_cs12a_cout[3:3]),
	.sin(wire_cs12a_sin[3:3]),
	.sout(wire_cs12a_sout[3:3]));
	carry_sum   cs12a_4
	( 
	.cin(wire_cs12a_cin[4:4]),
	.cout(wire_cs12a_cout[4:4]),
	.sin(wire_cs12a_sin[4:4]),
	.sout(wire_cs12a_sout[4:4]));
	carry_sum   cs12a_5
	( 
	.cin(wire_cs12a_cin[5:5]),
	.cout(wire_cs12a_cout[5:5]),
	.sin(wire_cs12a_sin[5:5]),
	.sout(wire_cs12a_sout[5:5]));
	carry_sum   cs12a_6
	( 
	.cin(wire_cs12a_cin[6:6]),
	.cout(wire_cs12a_cout[6:6]),
	.sin(wire_cs12a_sin[6:6]),
	.sout(wire_cs12a_sout[6:6]));
	carry_sum   cs12a_7
	( 
	.cin(wire_cs12a_cin[7:7]),
	.cout(wire_cs12a_cout[7:7]),
	.sin(wire_cs12a_sin[7:7]),
	.sout(wire_cs12a_sout[7:7]));
	carry_sum   cs12a_8
	( 
	.cin(wire_cs12a_cin[8:8]),
	.cout(wire_cs12a_cout[8:8]),
	.sin(wire_cs12a_sin[8:8]),
	.sout(wire_cs12a_sout[8:8]));
	carry_sum   cs12a_9
	( 
	.cin(wire_cs12a_cin[9:9]),
	.cout(wire_cs12a_cout[9:9]),
	.sin(wire_cs12a_sin[9:9]),
	.sout(wire_cs12a_sout[9:9]));
	assign
		wire_cs12a_cin = {((~ (dffe8a[9:1] ^ read_delay_stratix[9:1])) & wire_cs12a_cout[8:0]), (~ (dffe8a[0] ^ read_delay_stratix[0]))},
		wire_cs12a_sin = {((~ (dffe8a[9:1] ^ read_delay_stratix[9:1])) & wire_cs12a_cout[8:0]), (~ (dffe8a[0] ^ read_delay_stratix[0]))};
	carry_sum   cs13
	( 
	.cin(((~ wire_cs12a_cout[9]) & rdreq)),
	.cout(wire_cs13_cout),
	.sin(((~ wire_cs12a_cout[9]) & rdreq)),
	.sout(wire_cs13_sout));
	carry_sum   cs6a_0
	( 
	.cin(wire_cs6a_cin[0:0]),
	.cout(wire_cs6a_cout[0:0]),
	.sin(wire_cs6a_sin[0:0]),
	.sout(wire_cs6a_sout[0:0]));
	carry_sum   cs6a_1
	( 
	.cin(wire_cs6a_cin[1:1]),
	.cout(wire_cs6a_cout[1:1]),
	.sin(wire_cs6a_sin[1:1]),
	.sout(wire_cs6a_sout[1:1]));
	carry_sum   cs6a_2
	( 
	.cin(wire_cs6a_cin[2:2]),
	.cout(wire_cs6a_cout[2:2]),
	.sin(wire_cs6a_sin[2:2]),
	.sout(wire_cs6a_sout[2:2]));
	carry_sum   cs6a_3
	( 
	.cin(wire_cs6a_cin[3:3]),
	.cout(wire_cs6a_cout[3:3]),
	.sin(wire_cs6a_sin[3:3]),
	.sout(wire_cs6a_sout[3:3]));
	carry_sum   cs6a_4
	( 
	.cin(wire_cs6a_cin[4:4]),
	.cout(wire_cs6a_cout[4:4]),
	.sin(wire_cs6a_sin[4:4]),
	.sout(wire_cs6a_sout[4:4]));
	carry_sum   cs6a_5
	( 
	.cin(wire_cs6a_cin[5:5]),
	.cout(wire_cs6a_cout[5:5]),
	.sin(wire_cs6a_sin[5:5]),
	.sout(wire_cs6a_sout[5:5]));
	carry_sum   cs6a_6
	( 
	.cin(wire_cs6a_cin[6:6]),
	.cout(wire_cs6a_cout[6:6]),
	.sin(wire_cs6a_sin[6:6]),
	.sout(wire_cs6a_sout[6:6]));
	carry_sum   cs6a_7
	( 
	.cin(wire_cs6a_cin[7:7]),
	.cout(wire_cs6a_cout[7:7]),
	.sin(wire_cs6a_sin[7:7]),
	.sout(wire_cs6a_sout[7:7]));
	carry_sum   cs6a_8
	( 
	.cin(wire_cs6a_cin[8:8]),
	.cout(wire_cs6a_cout[8:8]),
	.sin(wire_cs6a_sin[8:8]),
	.sout(wire_cs6a_sout[8:8]));
	carry_sum   cs6a_9
	( 
	.cin(wire_cs6a_cin[9:9]),
	.cout(wire_cs6a_cout[9:9]),
	.sin(wire_cs6a_sin[9:9]),
	.sout(wire_cs6a_sout[9:9]));
	assign
		wire_cs6a_cin = {(read_count_actual[9:1] & wire_cs6a_cout[8:0]), (fast_feed_read & read_count_actual[0])},
		wire_cs6a_sin = {(read_count_actual[9:1] ^ wire_cs6a_cout[8:0]), (fast_feed_read ^ read_count_actual[0])};
	// synopsys translate_off
	initial
		dffe5a = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  posedge aclr)
		if (aclr == 1'b1) dffe5a <= 10'b0;
		else  dffe5a <= wire_cs6a_sout;
	// synopsys translate_off
	initial
		dffe7a = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) dffe7a <= 10'b0;
		else  dffe7a <= wire_cntr1_q;
	// synopsys translate_off
	initial
		dffe8a = 0;
	// synopsys translate_on
	always @ ( posedge rdclk or  posedge aclr)
		if (aclr == 1'b1) dffe8a <= 10'b0;
		else  dffe8a <= dffe7a;
	// synopsys translate_off
	initial
		dffe9a = 0;
	// synopsys translate_on
	always @ ( posedge wrclk or  posedge aclr)
		if (aclr == 1'b1) dffe9a <= 10'b0;
		else  dffe9a <= read_delay_stratix;
	wrfifo_add_sub   add_sub2
	( 
	.cout(wire_add_sub2_cout),
	.dataa(wire_cntr1_q[8:0]),
	.datab(dffe9a[8:0]),
	.result(wire_add_sub2_result));
	wrfifo_add_sub1   add_sub3
	( 
	.dataa(dffe8a),
	.datab(read_delay_stratix),
	.result(wire_add_sub3_result));
	wrfifo_cntr   cntr1
	( 
	.aclr(aclr),
	.clock(wrclk),
	.cnt_en(wire_cs10a_sout[1]),
	.q(wire_cntr1_q));
	assign
		fast_feed_read = wire_cs13_cout,
		q = wire_dpram4_q,
		rdempty = wire_cs12a_sout[9],
		rdusedw = wire_add_sub3_result[8:0],
		read_count_actual = dffe5a,
		read_delay_stratix = read_count_actual,
		wrempty = wire_cs11a_sout[9],
		wrfull = wire_cs10a_sout[0],
		wrusedw = wire_add_sub2_result[8:0];
endmodule //wrfifo_alt_sync_fifo

//synthesis_resources = lut 102 M4K 2 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"AUTO_SHIFT_REGISTER_RECOGNITION=OFF;suppress_da_rule_internal=d101"} *)
module  wrfifo_dcfifo
	( 
	data,
	q,
	rdclk,
	rdreq,
	wrclk,
	wrreq,
	wrusedw) /* synthesis synthesis_clearbox=1 */;
	input   [15:0]  data;
	output   [15:0]  q;
	input   rdclk;
	input   rdreq;
	input   wrclk;
	input   wrreq;
	output   [8:0]  wrusedw;

	wire  [15:0]   wire_sync_fifo_q;
	wire  wire_sync_fifo_rdempty;
	wire  [8:0]   wire_sync_fifo_rdusedw;
	wire  wire_sync_fifo_wrempty;
	wire  wire_sync_fifo_wrfull;
	wire  [8:0]   wire_sync_fifo_wrusedw;
	wire aclr;

	wrfifo_alt_sync_fifo   sync_fifo
	( 
	.aclr(aclr),
	.data(data),
	.q(wire_sync_fifo_q),
	.rdclk(rdclk),
	.rdempty(wire_sync_fifo_rdempty),
	.rdreq(rdreq),
	.rdusedw(wire_sync_fifo_rdusedw),
	.wrclk(wrclk),
	.wrempty(wire_sync_fifo_wrempty),
	.wrfull(wire_sync_fifo_wrfull),
	.wrreq(wrreq),
	.wrusedw(wire_sync_fifo_wrusedw));
	assign
		aclr = 1'b0,
		q = wire_sync_fifo_q,
		wrusedw = wire_sync_fifo_wrusedw;
endmodule //wrfifo_dcfifo
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module wrfifo (
	data,
	rdclk,
	rdreq,
	wrclk,
	wrreq,
	q,
	wrusedw)/* synthesis synthesis_clearbox = 1 */;

	input	[15:0]  data;
	input	  rdclk;
	input	  rdreq;
	input	  wrclk;
	input	  wrreq;
	output	[15:0]  q;
	output	[8:0]  wrusedw;

	wire [15:0] sub_wire0;
	wire [8:0] sub_wire1;
	wire [15:0] q = sub_wire0[15:0];
	wire [8:0] wrusedw = sub_wire1[8:0];

	wrfifo_dcfifo	wrfifo_dcfifo_component (
				.data (data),
				.rdclk (rdclk),
				.rdreq (rdreq),
				.wrclk (wrclk),
				.wrreq (wrreq),
				.q (sub_wire0),
				.wrusedw (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: AlmostEmpty NUMERIC "0"
// Retrieval info: PRIVATE: AlmostEmptyThr NUMERIC "-1"
// Retrieval info: PRIVATE: AlmostFull NUMERIC "0"
// Retrieval info: PRIVATE: AlmostFullThr NUMERIC "-1"
// Retrieval info: PRIVATE: CLOCKS_ARE_SYNCHRONIZED NUMERIC "1"
// Retrieval info: PRIVATE: Clock NUMERIC "4"
// Retrieval info: PRIVATE: Depth NUMERIC "512"
// Retrieval info: PRIVATE: Empty NUMERIC "1"
// Retrieval info: PRIVATE: Full NUMERIC "1"
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone"
// Retrieval info: PRIVATE: LE_BasedFIFO NUMERIC "0"
// Retrieval info: PRIVATE: LegacyRREQ NUMERIC "1"
// Retrieval info: PRIVATE: MAX_DEPTH_BY_9 NUMERIC "0"
// Retrieval info: PRIVATE: OVERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: Optimize NUMERIC "2"
// Retrieval info: PRIVATE: RAM_BLOCK_TYPE NUMERIC "2"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: UNDERFLOW_CHECKING NUMERIC "0"
// Retrieval info: PRIVATE: UsedW NUMERIC "1"
// Retrieval info: PRIVATE: Width NUMERIC "16"
// Retrieval info: PRIVATE: dc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: diff_widths NUMERIC "0"
// Retrieval info: PRIVATE: msb_usedw NUMERIC "0"
// Retrieval info: PRIVATE: output_width NUMERIC "16"
// Retrieval info: PRIVATE: rsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: rsFull NUMERIC "0"
// Retrieval info: PRIVATE: rsUsedW NUMERIC "0"
// Retrieval info: PRIVATE: sc_aclr NUMERIC "0"
// Retrieval info: PRIVATE: sc_sclr NUMERIC "0"
// Retrieval info: PRIVATE: wsEmpty NUMERIC "0"
// Retrieval info: PRIVATE: wsFull NUMERIC "0"
// Retrieval info: PRIVATE: wsUsedW NUMERIC "1"
// Retrieval info: LIBRARY: altera_mf altera_mf.altera_mf_components.all
// Retrieval info: CONSTANT: ADD_RAM_OUTPUT_REGISTER STRING "OFF"
// Retrieval info: CONSTANT: CLOCKS_ARE_SYNCHRONIZED STRING "TRUE"
// Retrieval info: CONSTANT: INTENDED_DEVICE_FAMILY STRING "Cyclone"
// Retrieval info: CONSTANT: LPM_HINT STRING "RAM_BLOCK_TYPE=M4K"
// Retrieval info: CONSTANT: LPM_NUMWORDS NUMERIC "512"
// Retrieval info: CONSTANT: LPM_SHOWAHEAD STRING "OFF"
// Retrieval info: CONSTANT: LPM_TYPE STRING "dcfifo"
// Retrieval info: CONSTANT: LPM_WIDTH NUMERIC "16"
// Retrieval info: CONSTANT: LPM_WIDTHU NUMERIC "9"
// Retrieval info: CONSTANT: OVERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: UNDERFLOW_CHECKING STRING "ON"
// Retrieval info: CONSTANT: USE_EAB STRING "ON"
// Retrieval info: USED_PORT: data 0 0 16 0 INPUT NODEFVAL "data[15..0]"
// Retrieval info: USED_PORT: q 0 0 16 0 OUTPUT NODEFVAL "q[15..0]"
// Retrieval info: USED_PORT: rdclk 0 0 0 0 INPUT NODEFVAL "rdclk"
// Retrieval info: USED_PORT: rdreq 0 0 0 0 INPUT NODEFVAL "rdreq"
// Retrieval info: USED_PORT: wrclk 0 0 0 0 INPUT NODEFVAL "wrclk"
// Retrieval info: USED_PORT: wrreq 0 0 0 0 INPUT NODEFVAL "wrreq"
// Retrieval info: USED_PORT: wrusedw 0 0 9 0 OUTPUT NODEFVAL "wrusedw[8..0]"
// Retrieval info: CONNECT: @data 0 0 16 0 data 0 0 16 0
// Retrieval info: CONNECT: @rdclk 0 0 0 0 rdclk 0 0 0 0
// Retrieval info: CONNECT: @rdreq 0 0 0 0 rdreq 0 0 0 0
// Retrieval info: CONNECT: @wrclk 0 0 0 0 wrclk 0 0 0 0
// Retrieval info: CONNECT: @wrreq 0 0 0 0 wrreq 0 0 0 0
// Retrieval info: CONNECT: q 0 0 16 0 @q 0 0 16 0
// Retrieval info: CONNECT: wrusedw 0 0 9 0 @wrusedw 0 0 9 0
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo.inc FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo.cmp FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo_waveforms.html TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo_wave*.jpg FALSE
// Retrieval info: GEN_FILE: TYPE_NORMAL wrfifo_syn.v TRUE
